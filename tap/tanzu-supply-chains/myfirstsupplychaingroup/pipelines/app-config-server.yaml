apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
    name: app-config-server
spec:
    description: Generates configuration for a Server application from a Conventions PodIntent.
    params:
        - description: URL of the OCI image containing the Conventions PodIntent.
          name: config-url
          type: string
        - description: Workload name.
          name: workload-name
          type: string
        - description: Workload labels.
          name: workload-labels
          type: string
        - description: Workload annotations.
          name: workload-annotations
          type: string
    results:
        - description: URL of the resulting OCI image containing raw YAML config files.
          name: url
          type: string
          value: $(tasks.store.results.url)
        - description: SHA of the resulting OCI image containing raw YAML config files.
          name: digest
          type: string
          value: $(tasks.store.results.digest)
        - description: URL of the resulting OCI image containing YTT files.
          name: url-overlay
          type: string
          value: $(tasks.store-overlay.results.url)
        - description: SHA of the resulting OCI image containing YTT files.
          name: digest-overlay
          type: string
          value: $(tasks.store-overlay.results.digest)
    tasks:
        - name: fetch-conventions
          params:
            - name: url
              value: $(params.config-url)
          taskRef:
            kind: Task
            name: fetch-tgz-content-oci
          workspaces:
            - name: store
              workspace: shared-data
        - name: server-template
          params:
            - name: workload-name
              value: $(params.workload-name)
            - name: workload-labels
              value: $(params.workload-labels)
            - name: workload-annotations
              value: $(params.workload-annotations)
          runAfter:
            - fetch-conventions
          taskSpec:
            metadata: {}
            params:
                - name: workload-name
                  type: string
                - name: workload-labels
                  type: string
                - name: workload-annotations
                  type: string
            results:
                - name: template
                  type: string
            spec: null
            stepTemplate:
                computeResources: {}
                securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                        drop:
                            - ALL
                    runAsNonRoot: true
                    runAsUser: 1001
                    seccompProfile:
                        type: RuntimeDefault
            steps:
                - computeResources: {}
                  image: harbor.tap.h2o-2-19271.h2o.vmware.com/tap/tap-packages@sha256:40846b06a134950cc3c8d85d65009425476b23180b98cb784b2dd5eb84b0287d
                  name: create-template
                  script: |
                    #!/bin/bash

                    set -euo pipefail

                    ls -al $(workspaces.content.path)
                    conv=$(cat $(workspaces.content.path)/app-config.yaml)

                    cd `mktemp -d`

                    if [[ '$(params.workload-name)' == \$\(* ]]; then
                      workload_name=""
                    else
                      workload_name='$(params.workload-name)'
                    fi

                    if [[ '$(params.workload-labels)' == \$\(* ]]; then
                      workload_labels=""
                    else
                      workload_labels='$(params.workload-labels)'
                    fi

                    if [[ '$(params.workload-annotations)' == \$\(* ]]; then
                      workload_annotations=""
                    else
                      workload_annotations='$(params.workload-annotations)'
                    fi

                    cd `mktemp -d`

                    create_template \
                      -workload-name="${workload_name}" \
                      -workload-labels="${workload_labels}" \
                      -workload-annotations="${workload_annotations}" \
                      -conventions="${conv}"
                    if [ $? -ne 0 ]; then
                      echo "create template failed"
                      tee error.txt
                      exit 1
                    fi

                    cat appconfig.yaml

                    rm $(workspaces.content.path)/app-config.yaml

                    cat appconfig.yaml > $(results.template.path)
                    cp  appconfig.yaml $(workspaces.content.path)
          workspaces:
            - name: content
              workspace: shared-data
        - name: store
          params:
            - name: workload-name
              value: $(params.workload-name)
          runAfter:
            - server-template
          taskRef:
            kind: Task
            name: store-content-oci
          workspaces:
            - name: input
              workspace: shared-data
        - name: add-overlays
          params:
            - name: workload-name
              value: $(params.workload-name)
          runAfter:
            - store
          taskSpec:
            metadata: {}
            params:
                - name: workload-name
                  type: string
            results:
                - name: overlays
                  type: string
                - name: values
                  type: string
            spec: null
            stepTemplate:
                computeResources: {}
                securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                        drop:
                            - ALL
                    runAsNonRoot: true
                    runAsUser: 1001
                    seccompProfile:
                        type: RuntimeDefault
            steps:
                - computeResources: {}
                  image: harbor.tap.h2o-2-19271.h2o.vmware.com/tap/tap-packages@sha256:40846b06a134950cc3c8d85d65009425476b23180b98cb784b2dd5eb84b0287d
                  name: write-file
                  script: "#!/bin/bash\nset -euo pipefail\n\ncat <<EOF > $(workspaces.content.path)/server-template-overlays.yaml\n#@ load(\"@ytt:overlay\", \"overlay\")\n#@ load(\"@ytt:data\", \"data\")\n\n#@overlay/match by=overlay.subset({\"apiVersion\":\"apps/v1\", \"kind\": \"Deployment\"})\n---\nspec:\n  #@ if data.values.replicas:\n  #@overlay/match missing_ok=True\n  replicas: #@ data.values.replicas\n  #@ end\n\n  #@ if data.values.strategy:\n  #@overlay/match missing_ok=True\n  #@overlay/replace or_add=True\n  strategy: #@ data.values.strategy\n  #@ end\n\n  #@overlay/match-child-defaults missing_ok=True\n  template:\n    spec:\n      containers:\n        #@overlay/match by=overlay.index(0)\n        - name: workload\n          #@ if data.values.livenessProbe:\n          #@overlay/match missing_ok=True\n          #@overlay/replace or_add=True\n          livenessProbe: #@ data.values.livenessProbe\n          #@ end\n\n          #@ if data.values.readinessProbe:\n          #@overlay/match missing_ok=True\n          #@overlay/replace or_add=True\n          readinessProbe: #@ data.values.readinessProbe\n          #@ end\n\n          #@ if data.values.resources:\n          #@overlay/match missing_ok=True\n          #@overlay/replace or_add=True\n          resources: #@ data.values.resources\n          #@ end\n          \n          #@ if data.values.securityContext:\n          #@overlay/match missing_ok=True\n          #@overlay/replace or_add=True\n          securityContext: #@ data.values.securityContext\n          #@ end\n\n          #@ if data.values.env:\n          #@overlay/match missing_ok=True\n          #@overlay/replace or_add=True\n          env: #@ data.values.env\n          #@ end\n\n#@overlay/match by=overlay.subset({\"apiVersion\":\"v1\", \"kind\": \"Service\"})\n---\nspec:\n  #@ if data.values.service and len(data.values.service.ports) > 0:\n  #@overlay/replace\n  ports: #@ data.values.service.ports\n  #@ end\n\n#@ if data.values.http_route != None:\n---\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: #@ data.values.workload_name + \"-route\"\nspec:\n  parentRefs:\n  #@ for/end gateway in data.values.http_route.gateways:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: #@ gateway.name\n    sectionName: #@ gateway.protocol + \"-\" + data.values.workload_name\n  rules:\n  - backendRefs:\n    - name: #@ data.values.workload_name\n      port: #@ data.values.port\n#@ elif data.values.hostname != \"\":\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: #@ data.values.workload_name\n  annotations:\n    cert-manager.io/cluster-issuer:  #@ data.values.cluster_issuer\n    ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    kubernetes.io/ingress.class: contour\n    kapp.k14s.io/change-rule: \"upsert after upserting Services\"\n  labels:\n    app.kubernetes.io/component: \"run\"\n    carto.run/workload-name:  #@ data.values.workload_name\nspec:\n  tls:\n    - secretName: #@ data.values.workload_name\n      hosts:\n      - #@ data.values.hostname\n  rules:\n  - host: #@ data.values.hostname\n    http:\n      paths:\n      - pathType: Prefix\n        path: /\n        backend:\n          service:\n            name: #@ data.values.workload_name\n            port:\n              number: #@ data.values.port\n#@ end\nEOF\n\ncat <<EOF > $(workspaces.content.path)/server-template-values.yaml\n#@data/values-schema\n---\n#@schema/desc \"Used to generate resource names for HttpRoute and Ingress objects.\"\n#@schema/example \"tanzu-java-web-app\"\n#@schema/validation min_len=1\nworkload_name: \"$(params.workload-name)\"\n\n#@schema/desc \"Overrides the default Deployment.spec.replicas set by the Supply Chain.\"\n#@schema/nullable\nreplicas: 1\n\n#@schema/desc \"Overrides the default Deployment.spec.strategy set by the Supply Chain.\"\n#@schema/type any=True\nstrategy: null\n\n#@schema/desc \"Overrides the default Deployment.spec.containers[0].livenessProbe set by the Supply Chain.\"\n#@schema/example {\"periodSeconds\": 10}\n#@schema/type any=True\nlivenessProbe: null\n\n#@schema/desc \"Overrides the default Deployment.spec.containers[0].readinessProbe set by the Supply Chain.\"\n#@schema/example {\"periodSeconds\": 10}\n#@schema/type any=True\nreadinessProbe: null\n\n#@schema/desc \"Overrides the default Deployment.spec.containers[0].resources set by the Supply Chain.\"\n#@schema/example {\"requests\": {\"memory\": \"750Mi\"}}\n#@schema/type any=True\nresources: null\n\n#@schema/desc \"Overrides the default Deployment.spec.containers[0].env set by the Supply Chain.\"\n#@schema/example {\"MY_ENV_VAR\": \"VALUE\"}\n#@schema/type any=True\nenv: null\n\n#@schema/desc \"Overrides the default Deployment.spec.containers[0].securityContext set by the Supply Chain.\"\n#@schema/example {\"runAsUser\": 1001}\n#@schema/type any=True\nsecurityContext: null\n\n#@schema/desc \"Sets the Port for the backend referenced by the Ingress or HttpRoute object.\"\nport: 8080\n\n#@schema/desc \"Sets the Host for the Ingress object (class=contour). If unset, no Ingress will be created.\"\n#@schema/example \"app.tanzu.vmware.com\"\nhostname: \"\"\n\n#@schema/desc \"Sets the CertManager ClusterIssuer for the Ingress object.\"\ncluster_issuer: \"tap-ingress-selfsigned\"\n\n#@schema/desc \"Sets the ParentRefs for the HttpRoute object. If set to null, no HttpRoute will be created.\"\n#@schema/nullable\nhttp_route:\n    #@schema/default [{\"protocol\": \"https\", \"name\": \"default-gateway\"}]\n    gateways:\n    - protocol: \"\"\n      name: \"\"\n\n#@schema/title \"Service\"\n#@schema/nullable\nservice:\n  #@schema/title \"Overrides the default Service.spec.ports set by the Supply Chain.\"\n  ports:\n  - name: http\n    port: 8080\n    targetPort: 8080\nEOF\n\necho \"$(workspaces.content.path)/server-template-overlays.yaml\" | tee $(results.overlays.path)\necho \"$(workspaces.content.path)/server-template-values.yaml\" | tee $(results.values.path)\n"
          workspaces:
            - name: content
              workspace: overlay-data
        - name: store-overlay
          params:
            - name: workload-name
              value: $(params.workload-name)
          runAfter:
            - add-overlays
          taskRef:
            kind: Task
            name: store-content-oci
          workspaces:
            - name: input
              workspace: overlay-data
    workspaces:
        - description: |
            Used to store the Conventions PodIntent and generated config files.
          name: shared-data
        - description: |
            Used to store generated YTT files.
          name: overlay-data
