apiVersion: tekton.dev/v1
kind: Task
metadata:
    name: carvel-package
spec:
    description: A task that builds a Carvel Package
    params:
        - description: Name of the Workload. Used as a default for the Carvel Package secret name.
          name: workload-name
          type: string
        - description: Name of the registry + repository to push the imgpkg bundle to.
          name: imgpkg-bundle-url
          type: string
        - default: ""
          description: |
            PEM encoded certificate data for the image registry where the files will be pushed to.
          name: imgpkg-ca-cert-data
          type: string
        - default: "false"
          description: Enable the use of IAAS based authentication for imgpkg.
          name: imgpkg-iaas-auth-enabled
          type: string
        - description: The name of the Carvel Package
          name: carvel-package-name
          type: string
        - description: The domain of the Carvel Package
          name: carvel-package-domain
          type: string
        - description: Secret that provides customized values to the package installation's templating steps
          name: carvel-package-values-secret-name
          type: string
        - default: default
          description: Service account that gives kapp-controller privileges to create resources in the namespace
          name: carvel-package-service-account
          type: string
        - default: ""
          description: the sub-path into the git repository in which to write the configuration.
          name: gitops-subpath
          type: string
        - name: CA_FILE_SECRET
          description: Secret with base64 encoded CA file for Helm repository
          default: ca-certs
          type: string
        - name: NEXT_TAG
          type: string
    results:
        - description: Carvel distributable packages that enables users to install on a different cluster.
          name: carvel-package
          type: string
        - name: imgpkg-bundle
          type: string
        - name: carvel-package-version
          type: string
    stepTemplate:
        computeResources: {}
        securityContext:
            allowPrivilegeEscalation: false
            capabilities:
                drop:
                    - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
                type: RuntimeDefault
    steps:
        - computeResources: {}
          env:
            - name: DOCKER_CONFIG
              value: /tekton/home/.docker/
            - name: HOME
              value: /tekton/home/
            - name: CA_FILE_CONTENT
              valueFrom:
                secretKeyRef:
                  name: $(params.CA_FILE_SECRET)
                  key: ca.crt
          image: harbor.tap.h2o-2-19271.h2o.vmware.com/tap/tap-packages@sha256:a3f31f02bc929c3743ab38401c6593db6ba7c0e5762b488d09bd6f0c6a22798b
          name: build-imgpkg-bundle
          volumeMounts:
            - name: config
              mountPath: /config
          script: |-
            #!/bin/bash

            set -euox pipefail

            # Write the base64 encoded CA file to a file
            echo "CA Cert found: ${CA_FILE_CONTENT}"
            export CA_CERT_PATH=/config/ca.crt
            cat <<< ${CA_FILE_CONTENT} > ${CA_CERT_PATH}

            cd `mktemp -d`

            echo "[DEBUG] $(workspaces.content.path)"
            ls -al $(workspaces.content.path)

            if ls $(workspaces.content.path)/*.yaml 1> /dev/null 2>&1; then
              mv $(workspaces.content.path)/*.yaml .
            fi

            echo "[DEBUG] ."
            ls -la

            #############################################
            #    build imgpkg bundle, openapiv3 spec    #
            #############################################

            values_filename=""
            if [ -f "server-template-values.yaml" ]; then
              values_filename=server-template-values.yaml
            elif [ -f "web-template-values.yaml" ]; then
              values_filename=web-template-values.yaml
            elif [ -f "worker-template-values.yaml" ]; then
              values_filename=worker-template-values.yaml
            fi

            if [ ! -z "$values_filename" ]; then
              ytt -f "$values_filename" --data-values-schema-inspect -o openapi-v3 > "$(workspaces.content.path)/schema-openapi.yml"
            fi

            mkdir -p .imgpkg
            kbld -f . --imgpkg-lock-output ".imgpkg/images.yml"

            echo "[DEBUG] .imgpkg/images.yml"
            cat .imgpkg/images.yml


            # this if-block can be simplified once params validation is implemented in supplychain for components
            iaas_auth_enabled='$(params.imgpkg-iaas-auth-enabled)'
            if [[ -z "$iaas_auth_enabled" ]]; then
              export IMGPKG_ENABLE_IAAS_AUTH="false"
            else
              export IMGPKG_ENABLE_IAAS_AUTH="$iaas_auth_enabled"
            fi

            imgpkg_bundle_url='$(params.imgpkg-bundle-url)'
            imgpkg push --registry-ca-cert-path ${CA_CERT_PATH} -b "$imgpkg_bundle_url" -f . --lock-output "package.lock"
            IMGPKG_BUNDLE="$(awk -F"image: " '{if ($2) print $2;}' package.lock)"
            cp package.lock $(workspaces.content.path)

            echo -n "$IMGPKG_BUNDLE" > $(results.imgpkg-bundle.path)
        - computeResources: {}
          env:
            - name: DOCKER_CONFIG
              value: /tekton/home/.docker/
            - name: HOME
              value: /tekton/home/
          image: harbor.tap.h2o-2-19271.h2o.vmware.com/tap/tap-packages@sha256:a3f31f02bc929c3743ab38401c6593db6ba7c0e5762b488d09bd6f0c6a22798b
          name: package-version
          script: |-
            #!/bin/bash

            set -euo pipefail

            export CARVEL_PACKAGE_VERSION=$(params.NEXT_TAG)

            echo -n "$CARVEL_PACKAGE_VERSION" > $(results.carvel-package-version.path)
        - computeResources: {}
          env:
            - name: DOCKER_CONFIG
              value: /tekton/home/.docker/
            - name: HOME
              value: /tekton/home/
          image: harbor.tap.h2o-2-19271.h2o.vmware.com/tap/tap-packages@sha256:a3f31f02bc929c3743ab38401c6593db6ba7c0e5762b488d09bd6f0c6a22798b
          name: build-carvel-package

          script: |-
            #!/bin/bash

            set -euo pipefail

            cd `mktemp -d`

            # if params.carvel-package-name unset, use workload name
            CARVEL_PACKAGE_SHORT_NAME="$(params.carvel-package-name)"
            if [ -z "${CARVEL_PACKAGE_SHORT_NAME}" ]; then
              CARVEL_PACKAGE_SHORT_NAME="$(params.workload-name)"
            fi

            # if params.carvel-package-domain unset, use default.tap
            CARVEL_PACKAGE_DOMAIN="$(params.carvel-package-domain)"
            if [ -z "${CARVEL_PACKAGE_DOMAIN}" ]; then
              CARVEL_PACKAGE_DOMAIN="default.tap"
            fi

            CARVEL_PACKAGE_NAME="${CARVEL_PACKAGE_SHORT_NAME}.${CARVEL_PACKAGE_DOMAIN}"

            echo "[DEBUG] CARVEL_PACKAGE_NAME"
            echo "${CARVEL_PACKAGE_NAME}"

            ##############################
            #    build carvel package    #
            ##############################

            CARVEL_PACKAGE_VERSION="$(cat $(results.carvel-package-version.path))"
            IMGPKG_BUNDLE="$(cat $(results.imgpkg-bundle.path))"
            CARVEL_PACKAGE_FILENAME="package.yaml"

            cat <<EOF > ./package-template.yaml
            #@ load("@ytt:data", "data")
            #@ load("@ytt:yaml", "yaml")

            apiVersion: data.packaging.carvel.dev/v1alpha1
            kind: Package
            metadata:
              name: ${CARVEL_PACKAGE_NAME}.${CARVEL_PACKAGE_VERSION}
            spec:
              refName: ${CARVEL_PACKAGE_NAME}
              version: ${CARVEL_PACKAGE_VERSION}
              releaseNotes: |
                Release v${CARVEL_PACKAGE_VERSION} of package ${CARVEL_PACKAGE_NAME}
              template:
                spec:
                  fetch:
                  - imgpkgBundle:
                      image: ${IMGPKG_BUNDLE}
                  template:
                  - ytt:
                      paths:
                      - "."
                  - kbld:
                      paths:
                      - ".imgpkg/images.yml"
                      - "-"
                  deploy:
                  - kapp: {}
              #@ if "openapi" in data.values:
              valuesSchema:
                openAPIv3: #@ yaml.decode(data.values.openapi)["components"]["schemas"]["dataValues"]
              #@ end
            EOF

            if [ -s $(workspaces.content.path)/schema-openapi.yml ]; then
              ytt -f ./package-template.yaml --data-value openapi="$(cat $(workspaces.content.path)/schema-openapi.yml)" | tee "${CARVEL_PACKAGE_FILENAME}"
            else
              ytt -f ./package-template.yaml | tee "${CARVEL_PACKAGE_FILENAME}"
            fi
            rm -f $(workspaces.content.path)/schema-openapi.yml

            #####################################
            #         build values secret       #
            #####################################

            VALUES_SECRET_NAME="${CARVEL_PACKAGE_NAME}-values"
            if [[ -n "$(params.carvel-package-values-secret-name)" ]]; then
              VALUES_SECRET_NAME="$(params.carvel-package-values-secret-name)"
            fi

            CARVEL_SECRET_FILENAME="values.yaml"

            cat <<EOF > ./${CARVEL_SECRET_FILENAME}
            ---
            apiVersion: v1
            kind: Secret
            metadata:
              name: ${VALUES_SECRET_NAME}
            stringData:
              values.yml: |
                ---
                # workload_name: example
            EOF

            #####################################
            #    build carvel package install   #
            #####################################

            CARVEL_PKGI_FILENAME="packageinstall.yaml"

            SA_NAME="default"
            if [[ -n "$(params.carvel-package-service-account)" ]]; then
              SA_NAME="$(params.carvel-package-service-account)"
            fi

            cat <<EOF > ./${CARVEL_PKGI_FILENAME}
            apiVersion: packaging.carvel.dev/v1alpha1
            kind: PackageInstall
            metadata:
              name: ${CARVEL_PACKAGE_NAME}-pkgi
            spec:
              packageRef:
                refName: ${CARVEL_PACKAGE_NAME}
                versionSelection:
                  constraints: ${CARVEL_PACKAGE_VERSION}
                  prereleases: {}
              serviceAccountName: ${SA_NAME}
              values:
              - secretRef:
                  name: ${VALUES_SECRET_NAME}
            EOF

            output_path="$(workspaces.content.path)/${CARVEL_PACKAGE_NAME}"
            mkdir "${output_path}"
            cp "${CARVEL_PACKAGE_FILENAME}" "${output_path}"
            cp "${CARVEL_PKGI_FILENAME}" "${output_path}"

            if ! test -f "$(workspaces.content.path)/gitops/$(params.gitops-subpath)/${CARVEL_PACKAGE_NAME}/${CARVEL_SECRET_FILENAME}"; then
              echo "writing values file, no values file exists in GitOps repo"
              cp "${CARVEL_SECRET_FILENAME}" "${output_path}"

              echo "[DEBUG] ${output_path}/${CARVEL_SECRET_FILENAME}"
              cat "${output_path}/${CARVEL_SECRET_FILENAME}"
            else
              echo "skipping values file writing, values file already exists in GitOps repo"
            fi

            rm -rf "$(workspaces.content.path)/gitops"

            echo "[DEBUG] ${output_path}/${CARVEL_PACKAGE_FILENAME}"
            cat "${output_path}/${CARVEL_PACKAGE_FILENAME}"

            echo "[DEBUG] ${output_path}/${CARVEL_PKGI_FILENAME}"
            cat "${output_path}/${CARVEL_PKGI_FILENAME}"

            echo "[DEBUG] $(workspaces.content.path)"
            ls -al "$(workspaces.content.path)"
            ls -al "$(workspaces.content.path)/${CARVEL_PACKAGE_NAME}"
    workspaces:
        - description: The folder where we write the carvel package version and imgpkg bundle path
          name: content
    volumes:
      - name: config
        emptyDir: {}