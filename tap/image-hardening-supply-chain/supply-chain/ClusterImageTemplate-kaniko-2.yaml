apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kaniko-template-2
spec:
  imagePath: .status.taskResults[?(@.name=="image_ref")].value
  lifecycle: tekton
  params:
    - default: default
      name: serviceAccount
    - default: {}
      name: registry
    - default: ./Dockerfile
      name: dockerfile
    - default: ./
      name: docker_build_context
    - default: []
      name: docker_build_extra_args
  ytt: "#@ load(\"@ytt:data\", \"data\")\n#@ load(\"@ytt:regexp\", \"regexp\")\n\n#@ def merge_labels(fixed_values):\n#@   labels = {}\n#@   if hasattr(data.values.workload.metadata, \"labels\"):\n#@     exclusions = [\"kapp.k14s.io/app\", \"kapp.k14s.io/association\"]\n#@     for k,v in dict(data.values.workload.metadata.labels).items():\n#@       if k not in exclusions:\n#@         labels[k] = v\n#@       end\n#@     end\n#@   end\n#@   labels.update(fixed_values)\n#@   return labels\n#@ end\n\n#@ def param(key):\n#@   if not key in data.values.params:\n#@     return None\n#@   end\n#@   return data.values.params[key]\n#@ end\n\n#@ def maven_param(key):\n#@   if not key in data.values.params[\"maven\"]:\n#@     return None\n#@   end\n#@   return data.values.params[\"maven\"][key]\n#@ end\n\n#@ def maven_repository_url():\n#@   if maven_param(\"repository\") and \"url\" in maven_param(\"repository\"):\n#@     return maven_param(\"repository\")[\"url\"]\n#@   elif param(\"maven_repository_url\"):\n#@     return param(\"maven_repository_url\")\n#@   else:\n#@     return None\n#@   end   \n#@ end\n\n#@ def image():\n#@   return \"/\".join([\n#@    data.values.params.registry.server,\n#@    data.values.params.registry.repository,\n#@    \"-\".join([\n#@      data.values.workload.metadata.name,\n#@      data.values.workload.metadata.namespace,\n#@    ])\n#@   ])\n#@ end\n\n#@ def ca_cert_data():\n#@   if \"ca_cert_data\" not in param(\"registry\"):\n#@     return \"\"\n#@   end\n#@\n#@   return param(\"registry\")[\"ca_cert_data\"]\n#@ end\n\n#@ def correlationId():\n#@   if hasattr(data.values.workload, \"annotations\") and hasattr(data.values.workload.annotations, \"apps.tanzu.vmware.com/correlationid\"):\n#@     return data.values.workload.annotations[\"apps.tanzu.vmware.com/correlationid\"]\n#@   end\n#@   url = \"\"\n#@   if hasattr(data.values.workload.spec, \"source\"):\n#@     if hasattr(data.values.workload.spec.source, \"git\"):\n#@       url = data.values.workload.spec.source.git.url\n#@     elif hasattr(data.values.workload.spec.source, \"image\"):\n#@       url = data.values.workload.spec.source.image.split(\"@\")[0]\n#@     end\n#@     url = url + \"?sub_path=\" + getattr(data.values.workload.spec.source, \"subPath\", \"/\")\n#@   end\n#@   if param(\"maven\"):\n#@     url = maven_repository_url() + \"/\" + maven_param(\"groupId\").replace(\".\", \"/\") + \"/\" + maven_param(\"artifactId\")  \n#@   end\n#@   return url\n#@ end\n\n#!  if the source revision matches the format of a git sha\n#!  we add it to the image labels\n#@ def merge_docker_extra_args():\n#@  extra_args = data.values.params.docker_build_extra_args\n#@  extra_args.append(\"--build-arg=APP_IMAGE={}\".format(data.values.image))\n#@   if regexp.match(\"^([a-zA-Z0-9\\/_-]+)(\\@sha1:)?([0-9a-f]{40})$\", data.values.source.revision):\n#@    for val in extra_args:\n#@      if val.count(\"org.opencontainers.image.revision\") > 0:\n#@        return extra_args\n#@      end\n#@    end\n#@  else:\n#@     return extra_args\n#@  end\n#@\n#@  extra_args.append(\"--label=org.opencontainers.image.revision={}\".format(data.values.source.revision))\n#@  return extra_args\n#@ end\n\n---\napiVersion: tekton.dev/v1beta1\nkind: TaskRun\nmetadata:\n  generateName: #@ data.values.workload.metadata.name + \"-build-\"\n  labels: #@ merge_labels({ \"app.kubernetes.io/component\": \"build\" })\n  annotations:\n    apps.tanzu.vmware.com/correlationid: #@ correlationId()\n    kapp.k14s.io/exists: \"\"\nspec:\n  serviceAccountName: #@ data.values.params.serviceAccount\n  taskRef:\n    resolver: cluster\n    params:\n      - name: kind\n        value: task\n      - name: namespace\n        value: tap-tasks\n      - name: name\n        value: kaniko-build-2\n  params:\n    - name: image\n      value: #@ image()\n    - name: source_tar\n      value: #@ data.values.source.url\n    - name: dockerfile\n      value: #@ data.values.params.dockerfile\n    - name: context\n      value: #@ data.values.params.docker_build_context\n    - name: extra_args\n      value: #@ merge_docker_extra_args()\n    - name: ca_cert_data\n      value: #@ ca_cert_data()\n"