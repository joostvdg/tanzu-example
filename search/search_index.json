{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome.","title":"HOME"},{"location":"carvel/","tags":["carvel","kubernetes","yaml","ytt"],"text":"Carvel tool suite. Coming soon.","title":"Carvel Toolsuite"},{"location":"carvel/helm-package/","tags":["carvel","kubernetes","yaml","ytt","helm"],"text":"Converting a Helm chart to a Carvel Package. Helm starting point: https://github.com/vfarcic/cncf-demo/tree/main/helm mkdir .imgpkg mkdir config kctrl package init Name : cncf-demo.joostvdg.github.com Content : 1 ( Local directory ) Source : https://github.com/vfarcic/cncf-demo/ Result: . \u251c\u2500\u2500 .imgpkg \u251c\u2500\u2500 config \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml Add content: tree -a . \u251c\u2500\u2500 .imgpkg \u2502 \u2514\u2500\u2500 images.yml \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 01 -schema.yml \u2502 \u251c\u2500\u2500 02 -deployment.ytt.yml \u2502 \u251c\u2500\u2500 03 -service.ytt.yml \u2502 \u2514\u2500\u2500 04 -ingress.ytt.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml ytt -f config | kbld -f - --imgpkg-lock-output .imgpkg/images.yml cat .imgpkg/images.yml --- apiVersion : imgpkg.carvel.dev/v1alpha1 images : - annotations : kbld.carvel.dev/id : docker.io/vfarcic/cncf-demo:v0.0.1 kbld.carvel.dev/origins : | - resolved: tag: v0.0.1 url: docker.io/vfarcic/cncf-demo:v0.0.1 image : index.docker.io/vfarcic/cncf-demo@sha256:a21e1ad0a4d071dde5e5533bbe2281ba05f44926f937c15a98f9485cc30c4782 kind : ImagesLock kctrl package release --version 0 .1.1 \\ --repo-output ../kctrl-package-repo Repository : index.docker.io/caladreas/carvel-helm Kctrl Dev \u00b6 T.B.D Package Repository \u00b6 kctrl package repository release Repository name : tanzu-example.joostvdg.github.com Registry : index.docker.io/caladreas/tanzu-example-repo Install Kapp Controller \u00b6 kubectl apply -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml Install Package Repository \u00b6 kctrl package repository add \\ --repository tanzu-example-repo \\ --url caladreas/tanzu-example-repo:0.0.0-build.1668725066 \\ --namespace kapp-controller-packaging-global Notes kapp-controller-packaging-global ... T.B.D kubectl get packagerepository -A NAMESPACE NAME AGE DESCRIPTION kapp-controller-packaging-global tanzu-example-repo 15s Reconcile succeeded Install Package \u00b6 kctrl package available list Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Available summarized packages in namespace 'default' Name Display name cncf-demo.joostvdg.github.com cncf-demo kctrl-package.demo.kearos.net kctrl-package Succeeded kctrl package available list \\ -p cncf-demo.joostvdg.github.com Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Available packages in namespace 'default' Name Version Released at cncf-demo.joostvdg.github.com 0 .1.1 2022 -11-17 23 :41:29 +0100 CET Succeeded kctrl package available get -p cncf-demo.joostvdg.github.com Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Name cncf-demo.joostvdg.github.com Display name cncf-demo Categories - Short description cncf-demo.joostvdg.github.com Long description cncf-demo.joostvdg.github.com Provider - Maintainers - Support description - Version Released at 0 .1.1 2022 -11-17 23 :41:29 +0100 CET Succeeded kctrl package available get \\ --package cncf-demo.joostvdg.github.com/0.1.1 \\ --values-schema Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Values schema for 'cncf-demo.joostvdg.github.com/0.1.1' Key Default Type Description image.repository docker.io/vfarcic/cncf-demo string The Container Image Repository image.tag v0.0.1 string The Container Image Tag ingress.host \"\" string The Ingress hostname name cncf-demo string Name for the resources Succeeded echo \" ingress: host: kiwi.fritz.box \" > cncf-demo-values.yml kubectl create namespace cncf-demo kctrl package install \\ --package-install cncf-demo-install \\ --package cncf-demo.joostvdg.github.com \\ --version 0 .1.1 \\ --namespace cncf-demo \\ --values-file cncf-demo-values.yml http kiwi.fritz.box HTTP/1.1 200 OK content-length: 21 content-type: text/plain ; charset = utf-8 date: Thu, 17 Nov 2022 23 :05:21 GMT server: envoy x-envoy-upstream-service-time: 0 This is a silly demo","title":"Helm To Carvel Package"},{"location":"carvel/helm-package/#kctrl-dev","text":"T.B.D","title":"Kctrl Dev"},{"location":"carvel/helm-package/#package-repository","text":"kctrl package repository release Repository name : tanzu-example.joostvdg.github.com Registry : index.docker.io/caladreas/tanzu-example-repo","title":"Package Repository"},{"location":"carvel/helm-package/#install-kapp-controller","text":"kubectl apply -f https://github.com/vmware-tanzu/carvel-kapp-controller/releases/latest/download/release.yml","title":"Install Kapp Controller"},{"location":"carvel/helm-package/#install-package-repository","text":"kctrl package repository add \\ --repository tanzu-example-repo \\ --url caladreas/tanzu-example-repo:0.0.0-build.1668725066 \\ --namespace kapp-controller-packaging-global Notes kapp-controller-packaging-global ... T.B.D kubectl get packagerepository -A NAMESPACE NAME AGE DESCRIPTION kapp-controller-packaging-global tanzu-example-repo 15s Reconcile succeeded","title":"Install Package Repository"},{"location":"carvel/helm-package/#install-package","text":"kctrl package available list Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Available summarized packages in namespace 'default' Name Display name cncf-demo.joostvdg.github.com cncf-demo kctrl-package.demo.kearos.net kctrl-package Succeeded kctrl package available list \\ -p cncf-demo.joostvdg.github.com Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Available packages in namespace 'default' Name Version Released at cncf-demo.joostvdg.github.com 0 .1.1 2022 -11-17 23 :41:29 +0100 CET Succeeded kctrl package available get -p cncf-demo.joostvdg.github.com Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Name cncf-demo.joostvdg.github.com Display name cncf-demo Categories - Short description cncf-demo.joostvdg.github.com Long description cncf-demo.joostvdg.github.com Provider - Maintainers - Support description - Version Released at 0 .1.1 2022 -11-17 23 :41:29 +0100 CET Succeeded kctrl package available get \\ --package cncf-demo.joostvdg.github.com/0.1.1 \\ --values-schema Target cluster 'https://pineapple:6443' ( nodes: pineapple, 6 + ) Values schema for 'cncf-demo.joostvdg.github.com/0.1.1' Key Default Type Description image.repository docker.io/vfarcic/cncf-demo string The Container Image Repository image.tag v0.0.1 string The Container Image Tag ingress.host \"\" string The Ingress hostname name cncf-demo string Name for the resources Succeeded echo \" ingress: host: kiwi.fritz.box \" > cncf-demo-values.yml kubectl create namespace cncf-demo kctrl package install \\ --package-install cncf-demo-install \\ --package cncf-demo.joostvdg.github.com \\ --version 0 .1.1 \\ --namespace cncf-demo \\ --values-file cncf-demo-values.yml http kiwi.fritz.box HTTP/1.1 200 OK content-length: 21 content-type: text/plain ; charset = utf-8 date: Thu, 17 Nov 2022 23 :05:21 GMT server: envoy x-envoy-upstream-service-time: 0 This is a silly demo","title":"Install Package"},{"location":"carvel/packages/","tags":["carvel","kubernetes","package","ytt","kctrl","kapp"],"text":"Carvel Package with KCTRL \u00b6 Starting with 0.40.0 the kctrl (K App Controller) supports managing Carvel Packages and Carvel Package Repositories. Prerequisites \u00b6 ytt kbld kctrl (=> 0.40.0) vendir Steps \u00b6 create root folder for the package initialize Carvel Package with kctrl package init update your package with the required content prepare Image Lock with ytt and kbld (optional step, which should become redundant) build and publish your kapp with kctrl package release build and publish your kapp repo with kctrl package repo release Init \u00b6 Lets create our package folder, the folder we'll use for the kbld ImageLock file ( .imgpkg ), and the folder where we store our Kubernetes resources ( config ). mkdir -p kctrl-package/.imgpkg mkdir -p kctrl-package/config cd kctrl-package kctrl package init We'll use a local folder called config to house our ytt templated Kubernetes resources. So when prompted, select 1: Local Directory with 1 and hit enter. And then answer with config for the folder location. Post Init Folder State \u00b6 tree -a Should return the following: . \u251c\u2500\u2500 .imgpkg \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml Add Content \u00b6 As the focus here is on packaging a Kubernetes application with Carvel packages, let us use a simple application as example. I've taken a liking to PodInfo , as it is a good demo application for various reasons and very well managed (GitHub repo, Helm chart, and so on). The Helm chart is available on Artifact Hub , where we can also inspect all the resource files and default values. I've made the effort of translating the Helm chart's Deployment and Service resources into ytt templated versions. Post Add Content State \u00b6 tree -a Results in: . \u251c\u2500\u2500 .imgpkg \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml Config.yaml \u00b6 #@ load(\"@ytt:data\", \"data\") #@ load(\"@ytt:assert\", \"assert\") #@ if data.values.name == \"\": #@ assert.fail('data value \"name\" must not be empty') #@ end #@ instanceName = data.values.name #@ labels = { \"app.kubernetes.io/name\": instanceName } #@ podHttpPort = \"8080\" #@ podMetricsPort = \"8081\" --- apiVersion : v1 kind : Service metadata : name : #@ instanceName labels : #@ labels spec : type : #@ data.values.service.type ports : - port : #@ int(data.values.service.httpPort) targetPort : http protocol : TCP name : http - port : #@ int(data.values.service.metricsPort) targetPort : http-metrics protocol : TCP name : http-metrics selector : #@ labels --- apiVersion : apps/v1 kind : Deployment metadata : name : #@ instanceName labels : #@ labels spec : replicas : #@ data.values.replicaCount strategy : type : RollingUpdate rollingUpdate : maxUnavailable : 1 selector : matchLabels : #@ labels template : metadata : labels : #@ labels annotations : prometheus.io/scrape : \"true\" prometheus.io/port : #@ data.values.service.metricsPort spec : terminationGracePeriodSeconds : 30 containers : - name : #@ instanceName image : #@ \"ghcr.io/stefanprodan/podinfo:\"+data.values.imageTag imagePullPolicy : #@ data.values.pullPolicy command : - ./podinfo - #@ \"--port=\" + podHttpPort - #@ \"--port-metrics=\" + podMetricsPort env : - name : PODINFO_UI_MESSAGE value : #@ data.values.ui.message - name : PODINFO_UI_COLOR value : #@ data.values.ui.color ports : - name : http containerPort : #@ int(podHttpPort) protocol : TCP - name : http-metrics containerPort : #@ int(podMetricsPort) protocol : TCP livenessProbe : exec : command : - podcli - check - http - #@ \"localhost:\" + podHttpPort + \"/healthz\" initialDelaySeconds : 1 timeoutSeconds : 5 readinessProbe : exec : command : - podcli - check - http - #@ \"localhost:\" + podHttpPort + \"/readyz\" initialDelaySeconds : 1 timeoutSeconds : 5 volumeMounts : - name : data mountPath : /data volumes : - name : data emptyDir : {} Values.yaml \u00b6 #@data/values-schema --- #@schema/title \"Instance Name\" #@schema/desc \"The name of the instance and related objects\" name : \"\" #@schema/title \"Instance Namespace\" #@schema/desc \"The namespace the instance objects should be deployed into\" #@schema/nullable namespace : \"\" #@schema/title \"Labels\" #@schema/desc \"A set of labels which will be applied to all resources related to this instance\" #@schema/default {\"app.kubernetes.io/app\":\"podinfo\"} #@schema/type any=True labels : #@schema/title \"ReplicaCount\" #@schema/desc \"Number of Replicas\" #@schema/default 1 replicaCount : 0 #@schema/title \"PullPolicy\" #@schema/desc \"Pull Policyd of the Container Image\" #@schema/default \"IfNotPresent\" pullPolicy : \"\" #@schema/title \"ImageTag\" #@schema/desc \"Tag of the Container Image\" #@schema/default \"6.2.0\" imageTag : \"\" #@schema/title \"Service Configuration\" #@schema/desc \"Options related to the Service\" service : #@schema/default \"ClusterIP\" type : \"\" #@schema/default \"9797\" metricsPort : \"\" #@schema/default \"80\" httpPort : \"\" #@schema/title \"UI Configuration\" #@schema/desc \"Options related to the UI, such as the message and the color\" ui : message : \"\" #@schema/default \"#34577c\" color : \"\" Create Image Lock file \u00b6 I really like the ImageLock feature of kbld . It is strongly recommend to always point to a OCI image SHA, rather than an image tag . But that is always so cumbersome. Assuming you already have a valid OCI image that is used by your resource(s), we can let kbld resolve the classic OCI image with tag to its SHA. Unfortunately, at this time of writing (August 22, 2022) with version 0.40.0 of the kctrl CLI, the release command doesn't do this properly. So we have to run this ourselves. The resources used are ytt templates, so we first run ytt before handing the files to kbld . ytt -f config -v name = podinfo-demo | kbld -f - --imgpkg-lock-output .imgpkg/images.yml Post Image Lock State \u00b6 tree -a Results in: . \u251c\u2500\u2500 .imgpkg \u2502 \u2514\u2500\u2500 images.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml Image.yml \u00b6 The images.yml file resides in the .imgpkg folder. --- apiVersion : imgpkg.carvel.dev/v1alpha1 images : - annotations : kbld.carvel.dev/id : ghcr.io/stefanprodan/podinfo:6.2.0 kbld.carvel.dev/origins : | - resolved: tag: 6.2.0 url: ghcr.io/stefanprodan/podinfo:6.2.0 image : ghcr.io/stefanprodan/podinfo@sha256:fbc7e3038e8f8235d4d0c04484ee5d3019eb941a9643b733e60c18443d228f3a kind : ImagesLock Verify Package \u00b6 The kctrl CLI supports deploying your package to a Kubernetes cluster directly for testing. This makes the development loop shorter, as it bypasses package release, installation via the KAPP Controller, and any intermediary steps (such a package repo updates). You can do this via the kctrl dev command. update package-resources.yml for ytt template data add data values file setup Kubernetes Service Account run kctrl dev command Update Package-Resources.yml \u00b6 The ytt template in config/config.yml contains a required value, name , which does not have a default value defined in config/values.yml . This is on purpose, to verify we are supplying the values correctly and they are used. In this case, we have to edit the package-resources.yml . Add a data path to the ytt template in the Package CR. The path: spec.template.spec.template.ytt.paths Which will them look like this: spec : template : spec : template : - ytt : paths : - config - data Add Data Values file \u00b6 We just told ytt to also look into the folder ./data for its templating. Lets add a value defition for the name property. We can do this by creating a file which is annotated with ytt 's annotation #@data/values . #@data/values --- name : podinfo-demo-01 Create Kubernetes Service Account \u00b6 kubectl create sa kctrl-package-sa kubectl create rolebinding kctrl-admin \\ --clusterrole = admin \\ --serviceaccount = default:kctrl-package-sa Kctrl Dev \u00b6 kctrl dev -f package-resources.yml -l End State After Dev \u00b6 tree -a . \u251c\u2500\u2500 .imgpkg \u2502 \u2514\u2500\u2500 images.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 default-values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml Release Package \u00b6 We currently have package metadata, content and an image lock file. The package is now ready to be released. Releasing a package creates meta data for a Package Repository, and pushes an OCI image with the package (also called a Bundle) to your OCI registry of choice. As with pushing any OCI image, such as a Docker container image, you need to have write access to a the registry. To verify you have that access, login to that registry with docker login or your Docker alternative's equivalent. Docker Login \u00b6 $ docker login Authenticating with existing credentials... Login Succeeded Release Package Command \u00b6 The first time you run the kctrl package release command, it is interactive. It asks you about your image's URL, such as index.docker.io/joostvdgtanzu/kctrl-package-demo-1 . Besides creating your package, you can also generate the meta data for a Package Repository, if you have one, with the --repo-output flag. kctrl package release -v 0 .1.0 \\ --repo-output ../kctrl-package-repo/packages \\ Sign Bundle With Cosign \u00b6 https://carvel.dev/blog/signing-imgpkg-bundles-with-cosign/ TODO Kapp Configuration \u00b6 https://carvel.dev/kapp/docs/v0.51.0/config/#waitrules","title":"Carvel Package with Kctrl"},{"location":"carvel/packages/#carvel-package-with-kctrl","text":"Starting with 0.40.0 the kctrl (K App Controller) supports managing Carvel Packages and Carvel Package Repositories.","title":"Carvel Package with KCTRL"},{"location":"carvel/packages/#prerequisites","text":"ytt kbld kctrl (=> 0.40.0) vendir","title":"Prerequisites"},{"location":"carvel/packages/#steps","text":"create root folder for the package initialize Carvel Package with kctrl package init update your package with the required content prepare Image Lock with ytt and kbld (optional step, which should become redundant) build and publish your kapp with kctrl package release build and publish your kapp repo with kctrl package repo release","title":"Steps"},{"location":"carvel/packages/#init","text":"Lets create our package folder, the folder we'll use for the kbld ImageLock file ( .imgpkg ), and the folder where we store our Kubernetes resources ( config ). mkdir -p kctrl-package/.imgpkg mkdir -p kctrl-package/config cd kctrl-package kctrl package init We'll use a local folder called config to house our ytt templated Kubernetes resources. So when prompted, select 1: Local Directory with 1 and hit enter. And then answer with config for the folder location.","title":"Init"},{"location":"carvel/packages/#post-init-folder-state","text":"tree -a Should return the following: . \u251c\u2500\u2500 .imgpkg \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml","title":"Post Init Folder State"},{"location":"carvel/packages/#add-content","text":"As the focus here is on packaging a Kubernetes application with Carvel packages, let us use a simple application as example. I've taken a liking to PodInfo , as it is a good demo application for various reasons and very well managed (GitHub repo, Helm chart, and so on). The Helm chart is available on Artifact Hub , where we can also inspect all the resource files and default values. I've made the effort of translating the Helm chart's Deployment and Service resources into ytt templated versions.","title":"Add Content"},{"location":"carvel/packages/#post-add-content-state","text":"tree -a Results in: . \u251c\u2500\u2500 .imgpkg \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml","title":"Post Add Content State"},{"location":"carvel/packages/#configyaml","text":"#@ load(\"@ytt:data\", \"data\") #@ load(\"@ytt:assert\", \"assert\") #@ if data.values.name == \"\": #@ assert.fail('data value \"name\" must not be empty') #@ end #@ instanceName = data.values.name #@ labels = { \"app.kubernetes.io/name\": instanceName } #@ podHttpPort = \"8080\" #@ podMetricsPort = \"8081\" --- apiVersion : v1 kind : Service metadata : name : #@ instanceName labels : #@ labels spec : type : #@ data.values.service.type ports : - port : #@ int(data.values.service.httpPort) targetPort : http protocol : TCP name : http - port : #@ int(data.values.service.metricsPort) targetPort : http-metrics protocol : TCP name : http-metrics selector : #@ labels --- apiVersion : apps/v1 kind : Deployment metadata : name : #@ instanceName labels : #@ labels spec : replicas : #@ data.values.replicaCount strategy : type : RollingUpdate rollingUpdate : maxUnavailable : 1 selector : matchLabels : #@ labels template : metadata : labels : #@ labels annotations : prometheus.io/scrape : \"true\" prometheus.io/port : #@ data.values.service.metricsPort spec : terminationGracePeriodSeconds : 30 containers : - name : #@ instanceName image : #@ \"ghcr.io/stefanprodan/podinfo:\"+data.values.imageTag imagePullPolicy : #@ data.values.pullPolicy command : - ./podinfo - #@ \"--port=\" + podHttpPort - #@ \"--port-metrics=\" + podMetricsPort env : - name : PODINFO_UI_MESSAGE value : #@ data.values.ui.message - name : PODINFO_UI_COLOR value : #@ data.values.ui.color ports : - name : http containerPort : #@ int(podHttpPort) protocol : TCP - name : http-metrics containerPort : #@ int(podMetricsPort) protocol : TCP livenessProbe : exec : command : - podcli - check - http - #@ \"localhost:\" + podHttpPort + \"/healthz\" initialDelaySeconds : 1 timeoutSeconds : 5 readinessProbe : exec : command : - podcli - check - http - #@ \"localhost:\" + podHttpPort + \"/readyz\" initialDelaySeconds : 1 timeoutSeconds : 5 volumeMounts : - name : data mountPath : /data volumes : - name : data emptyDir : {}","title":"Config.yaml"},{"location":"carvel/packages/#valuesyaml","text":"#@data/values-schema --- #@schema/title \"Instance Name\" #@schema/desc \"The name of the instance and related objects\" name : \"\" #@schema/title \"Instance Namespace\" #@schema/desc \"The namespace the instance objects should be deployed into\" #@schema/nullable namespace : \"\" #@schema/title \"Labels\" #@schema/desc \"A set of labels which will be applied to all resources related to this instance\" #@schema/default {\"app.kubernetes.io/app\":\"podinfo\"} #@schema/type any=True labels : #@schema/title \"ReplicaCount\" #@schema/desc \"Number of Replicas\" #@schema/default 1 replicaCount : 0 #@schema/title \"PullPolicy\" #@schema/desc \"Pull Policyd of the Container Image\" #@schema/default \"IfNotPresent\" pullPolicy : \"\" #@schema/title \"ImageTag\" #@schema/desc \"Tag of the Container Image\" #@schema/default \"6.2.0\" imageTag : \"\" #@schema/title \"Service Configuration\" #@schema/desc \"Options related to the Service\" service : #@schema/default \"ClusterIP\" type : \"\" #@schema/default \"9797\" metricsPort : \"\" #@schema/default \"80\" httpPort : \"\" #@schema/title \"UI Configuration\" #@schema/desc \"Options related to the UI, such as the message and the color\" ui : message : \"\" #@schema/default \"#34577c\" color : \"\"","title":"Values.yaml"},{"location":"carvel/packages/#create-image-lock-file","text":"I really like the ImageLock feature of kbld . It is strongly recommend to always point to a OCI image SHA, rather than an image tag . But that is always so cumbersome. Assuming you already have a valid OCI image that is used by your resource(s), we can let kbld resolve the classic OCI image with tag to its SHA. Unfortunately, at this time of writing (August 22, 2022) with version 0.40.0 of the kctrl CLI, the release command doesn't do this properly. So we have to run this ourselves. The resources used are ytt templates, so we first run ytt before handing the files to kbld . ytt -f config -v name = podinfo-demo | kbld -f - --imgpkg-lock-output .imgpkg/images.yml","title":"Create Image Lock file"},{"location":"carvel/packages/#post-image-lock-state","text":"tree -a Results in: . \u251c\u2500\u2500 .imgpkg \u2502 \u2514\u2500\u2500 images.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml","title":"Post Image Lock State"},{"location":"carvel/packages/#imageyml","text":"The images.yml file resides in the .imgpkg folder. --- apiVersion : imgpkg.carvel.dev/v1alpha1 images : - annotations : kbld.carvel.dev/id : ghcr.io/stefanprodan/podinfo:6.2.0 kbld.carvel.dev/origins : | - resolved: tag: 6.2.0 url: ghcr.io/stefanprodan/podinfo:6.2.0 image : ghcr.io/stefanprodan/podinfo@sha256:fbc7e3038e8f8235d4d0c04484ee5d3019eb941a9643b733e60c18443d228f3a kind : ImagesLock","title":"Image.yml"},{"location":"carvel/packages/#verify-package","text":"The kctrl CLI supports deploying your package to a Kubernetes cluster directly for testing. This makes the development loop shorter, as it bypasses package release, installation via the KAPP Controller, and any intermediary steps (such a package repo updates). You can do this via the kctrl dev command. update package-resources.yml for ytt template data add data values file setup Kubernetes Service Account run kctrl dev command","title":"Verify Package"},{"location":"carvel/packages/#update-package-resourcesyml","text":"The ytt template in config/config.yml contains a required value, name , which does not have a default value defined in config/values.yml . This is on purpose, to verify we are supplying the values correctly and they are used. In this case, we have to edit the package-resources.yml . Add a data path to the ytt template in the Package CR. The path: spec.template.spec.template.ytt.paths Which will them look like this: spec : template : spec : template : - ytt : paths : - config - data","title":"Update Package-Resources.yml"},{"location":"carvel/packages/#add-data-values-file","text":"We just told ytt to also look into the folder ./data for its templating. Lets add a value defition for the name property. We can do this by creating a file which is annotated with ytt 's annotation #@data/values . #@data/values --- name : podinfo-demo-01","title":"Add Data Values file"},{"location":"carvel/packages/#create-kubernetes-service-account","text":"kubectl create sa kctrl-package-sa kubectl create rolebinding kctrl-admin \\ --clusterrole = admin \\ --serviceaccount = default:kctrl-package-sa","title":"Create Kubernetes Service Account"},{"location":"carvel/packages/#kctrl-dev","text":"kctrl dev -f package-resources.yml -l","title":"Kctrl Dev"},{"location":"carvel/packages/#end-state-after-dev","text":"tree -a . \u251c\u2500\u2500 .imgpkg \u2502 \u2514\u2500\u2500 images.yml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 config.yml \u2502 \u2514\u2500\u2500 values.yml \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 default-values.yml \u251c\u2500\u2500 package-build.yml \u2514\u2500\u2500 package-resources.yml","title":"End State After Dev"},{"location":"carvel/packages/#release-package","text":"We currently have package metadata, content and an image lock file. The package is now ready to be released. Releasing a package creates meta data for a Package Repository, and pushes an OCI image with the package (also called a Bundle) to your OCI registry of choice. As with pushing any OCI image, such as a Docker container image, you need to have write access to a the registry. To verify you have that access, login to that registry with docker login or your Docker alternative's equivalent.","title":"Release Package"},{"location":"carvel/packages/#docker-login","text":"$ docker login Authenticating with existing credentials... Login Succeeded","title":"Docker Login"},{"location":"carvel/packages/#release-package-command","text":"The first time you run the kctrl package release command, it is interactive. It asks you about your image's URL, such as index.docker.io/joostvdgtanzu/kctrl-package-demo-1 . Besides creating your package, you can also generate the meta data for a Package Repository, if you have one, with the --repo-output flag. kctrl package release -v 0 .1.0 \\ --repo-output ../kctrl-package-repo/packages \\","title":"Release Package Command"},{"location":"carvel/packages/#sign-bundle-with-cosign","text":"https://carvel.dev/blog/signing-imgpkg-bundles-with-cosign/ TODO","title":"Sign Bundle With Cosign"},{"location":"carvel/packages/#kapp-configuration","text":"https://carvel.dev/kapp/docs/v0.51.0/config/#waitrules","title":"Kapp Configuration"}]}